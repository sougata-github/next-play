generator client {
  provider = "prisma-client-js"
  output = "../src/generated/client"

  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  clerkId String @unique
  name String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  videos Video[]
  views View[]
  reactions Reaction[]

  subscriptions Subscription[] @relation("UserSubscriptions")
  subscribers Subscription[] @relation("UserSubscribers")

  comments Comment[]
  commentReactions CommentReaction[]
} 

model Category {
  id String @id @default(uuid())
  name String @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  videos Video[]

  @@index([name])
}

enum Visibility {
  PRIVATE
  PUBLIC
}

model Video {
  id String @id @default(uuid())
  title String 
  description String?
  
  thumbnailUrl String?
  thumbnailKey String?
  
  previewUrl String?
  previewKey String?

  duration Int @default(0)
  visibility Visibility @default(PRIVATE)
  
  muxStatus String
  muxAssetId String? @unique
  muxUploadId String @unique
  muxPlaybackId String? @unique
  muxTrackId String? @unique
  muxTrackStatus String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  
  views View[]
  reactions Reaction[]
  comments Comment[]
}

model View {
  id String @id @default(uuid())

  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  videoId String 
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId,videoId], name: "userId_videoId")
}

enum ReactionType {
  LIKE
  DISLIKE
}

model Reaction {
  id String @id @default(uuid())

  type ReactionType 

  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  videoId String 
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId,videoId], name: "userId_videoId")
}

model Subscription{
  id String @id @default(uuid())

  viewerId String
  viewer User @relation("UserSubscriptions", fields: [viewerId], references: [id], onDelete: Cascade)

  creatorId String
  creator User @relation("UserSubscribers",fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@unique([viewerId, creatorId], name: "viewerId_creatorId")
}

model Comment {
  id String @id @default(uuid())

  content String

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  videoId String
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reactions CommentReaction[]
}

enum CommentReactionType {
  LIKE
  DISLIKE
}

model CommentReaction {
  id String @id @default(uuid())

  type CommentReactionType
    
  commentId String
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([commentId, userId], name: "commentId_userId")
}